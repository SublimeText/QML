%YAML 1.2
---
version: 2
name: QML
file_extensions:
  - qml
  - qmltypes
scope: source.qml
extends: Packages/JavaScript/JavaScript.sublime-syntax
variables:
  identifier_continue: '[[:alnum:]_]'
  identifier: '\b[[:alpha:]_]{{identifier_continue}}*\b'
  identifier_title: '\b[[:upper:]]{{identifier_continue}}*\b'
  identifier_untitle: '\b[[:lower:]]{{identifier_continue}}*\b'
  path: '({{identifier}}[ ]*\.[ ]*)*{{identifier}}'

contexts:
  main:
    - include: statements

  statements:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.qml
      pop: true

    - match: (?=\S)
      push: statement

  statement:
    - match: \;
      scope: punctuation.terminator.statement.empty.qml
      pop: true

    - include: pragma-statement
    - include: import-statement
    - include: object-standalone

  expect-semicolon:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - include: else-pop

  line-continuation-or-pop:
    - match: (?=\s*($|;))
      pop: true

  semicolon-or-eol-pop:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: (?=\s*$)
      pop: true

  pragma-statement:
    - match: \b(pragma)\s+(Singleton)\b
      scope: meta.pragma.qml
      captures:
        1: keyword.control.pragma.qml
        2: storage.modifier.singleton.qml

  import-statement:
    - match: import{{identifier_break}}
      scope: keyword.control.import.qml
      push:
        - meta_scope: meta.import.qml

        - include: import-string
        - include: import-version
        - include: import-alias
        - include: qualified-name

        - include: expect-semicolon
        - include: line-continuation-or-pop

  import-meta:
    - meta_include_prototype: false
    - meta_scope: meta.import.qml
    - include: immediately-pop

  import-string:
    - match: (?=['"])
      push: literal-string

  import-version:
    - match: '(\d+)(?:\s*(\.)\s*(\d+))?'
      scope: meta.number.version.qml
      captures:
        1: constant.numeric.value.qml
        2: punctuation.separator.decimal.qml
        3: constant.numeric.value.qml
    - match: (@)(?:{{identifier}})(@)
      scope: variable.other.cmake
      captures:
        1: punctuation.definition.variable.begin.cmake
        2: punctuation.definition.variable.end.cmake

  import-alias:
    - match: as{{identifier_break}}
      scope: keyword.operator.as.qml
      set:
        - meta_scope: meta.import.alias.qml
        - match: '{{identifier_title}}'
          scope: entity.name.namespace.qml
          set: expect-semicolon
        - include: import-illegal-names
        - include: expect-semicolon

  import-illegal-names:
    - match: '[^\s]+'
      scope: invalid.illegal.name.import.qml
      pop: true

  qualified-name:
    - match: (?={{identifier}})
      push: qualified-name-extended

  qualified-name-extended:
    - meta_scope: meta.path.qml

    - match: '{{identifier}}'
      scope: meta.generic-name.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: qualified-name-extended
        - include: line-continuation-or-pop
        - include: else-pop

  object-standalone:
    - include: object-type-name
    - include: object-block

  object-type-name:
    # either Namespace.Object or just Object
    - match: (?={{identifier_title}})
      push: object-type-name-extended

  object-type-name-extended:
    - match: '{{identifier_title}}(?!\s*\.)'
      scope: support.class.qml
      pop: true
    - match: '{{identifier_title}}'
      scope: support.class.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: object-type-name-extended

  object-block:
    - match: \{
      scope: punctuation.section.block.begin.qml
      push:
        - meta_scope: meta.block.qml
        - match: \}
          scope: punctuation.section.block.end.qml
          pop: true
        - include: object-block-statements

  object-block-statements:
    - match: \;
      scope: invalid.illegal.unexpected-terminator.qml
    - include: object-standalone
    - include: object-id

  object-id:
    - match: id{{identifier_break}}
      scope: keyword.other.id.qml
      push:
        - object-id-meta
        - object-id-extended

  object-id-meta:
    - meta_include_prototype: false
    - meta_scope: meta.binding.qml
    - include: immediately-pop

  object-id-extended:
    - match: ':'
      scope: keyword.operator.assignment.qml
      set: object-id-name
    - match: '\S+'
      scope: invalid.illegal.qml
      pop: true

  object-id-name:
    - meta_scope: meta.binding.qml
    - match: '(?={{non_reserved_identifier}}){{identifier_untitle}}'
      scope: entity.name.label.qml
      set:
        - include: semicolon-or-eol-pop
        - match: '\S+'
          scope: invalid.illegal.identifier.qml
          pop: true
    - match: '\S+'
      scope: invalid.illegal.identifier.qml
      pop: true
