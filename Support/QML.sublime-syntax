%YAML 1.2
---
name: QML
file_extensions:
  - qml
  - qmltypes
scope: source.qml

variables:
  identifier_continue: '[[:alnum:]_]'
  identifier: '\b[[:alpha:]_]{{identifier_continue}}*\b'
  identifier_title: '\b[[:upper:]]{{identifier_continue}}*\b'
  identifier_untitle: '\b[[:lower:]]{{identifier_continue}}*\b'
  path: '({{identifier}}[ ]*\.[ ]*)*{{identifier}}'

contexts:
  main:
    - include: statements

  statements:
    - include: comments
    - include: pragma
    - include: imports
    - include: object-standalone
    - match: ;
      scope: punctuation.terminator.statement.qml

  comments:
    - include: scope:source.c#comments

  line-continuation-or-pop:
    - match: (?=\s*($|;))
      pop: true

  pragma:
    - match: \b(pragma)\s+(Singleton)\b
      scope: meta.pragma.qml
      captures:
        1: keyword.control.pragma.qml
        2: storage.modifier.singleton.qml

  imports:
    - match: \bimport\b
      scope: keyword.control.import.qml
      set:
        - imports-import-body

  imports-import-body:
    - meta_scope: meta.import.qml
    - include: line-continuation-or-pop
    - include: imports-as
    - include: imports-version
    - include: qualified-name
    - match: (?=['"])
      push:
      - include: scope:source.js#literal-string

  imports-version:
    - match: (\d+)(\.)(\d+)
      captures:
        1: constant.numeric.qml
        2: punctuation.separator.decimal.qml
        3: constant.numeric.qml

  imports-as:
    - match: \bas\b
      scope: keyword.operator.as.qml
      push: imports-as-body

  imports-as-body:
    - meta_scope: meta.import.alias.qml
    - include: line-continuation-or-pop
    - match: (?={{identifier_title}})
      set: name-content-title
    - include: import-illegal-names
    - match: (?=\S)
      pop: true

  import-illegal-names:
    - match: '[^\s]+'
      scope: invalid.illegal.name.import.qml

  qualified-name:
    - match: (?={{path}})
      push: qualified-name-content
    - match: \.
      scope: punctuation.accessor.dot.qml

  qualified-name-content:
    - meta_scope: meta.path.qml
    - include: name
    - match: ''
      pop: true

  name:
    - match: (?={{identifier}})
      push: name-content

  name-content:
    - include: generic-name
    - match: ''
      pop: true

  generic-name:
    - match: '{{identifier}}'
      scope: ''

  name-title:
    - match: (?={{identifier_title}})
      push: name-content-title

  name-content-title:
    - include: generic-name-title
    - match: ''
      pop: true

  generic-name-title:
    - match: '{{identifier_title}}'
      scope: entity.name.namespace.qml

  object-standalone:
    - include: object-standalone-content

  # either Namespace.Object or just Object
  object-standalone-content:
    - include: comments
    - match: (?={{identifier_title}})
      branch_point: object-qualification
      branch:
        - object-without-namespace
        - object-with-namespace

  object-without-namespace:
    - include: comments
    - match: '{{identifier_title}}'
      scope: support.type.qml
      set:
        - match: \.
          fail: object-qualification
        - include: object-block

  object-with-namespace:
    - include: comments
    - match: '{{identifier_title}}'
      scope: entity.name.namespace.qml
      set:
        - include: comments
        - match: \.
          scope: punctuation.accessor.dot.qml
          set: object-name

  object-name:
    - include: comments
    - match: '{{identifier_title}}'
      scope: support.type.qml
      set: object-block

  object-block:
    - include: comments
    - match: \{
      scope: punctuation.section.braces.begin.qml
      push:
        - meta_scope: meta.block.qml
        - include: object-block-body
        - match: \}
          scope: punctuation.section.braces.end.qml
          pop: 2

  object-block-body:
    - include: comments
    - include: object-standalone
    - include: object-id
    - match: ;
      scope: punctuation.terminator.statement.qml

  object-id:
    - match: \bid\b
      push: object-id-content

  object-id-content:
    - meta_scope: meta.mapping.qml
    - include: comments
    - match: ':'
      scope: keyword.operator.assignment.qml
      set: object-id-name
    - match: '\S+'
      scope: invalid.illegal.qml
      pop: true

  object-id-name:
    - meta_scope: meta.mapping.qml
    - include: comments
    - match: '{{identifier_untitle}}'
      scope: entity.name.label.qml
      set:
        - include: comments
        - include: line-continuation-or-pop
        - match: '\S+'
          scope: invalid.illegal.identifier.qml
          pop: true
    - match: '\S+'
      scope: invalid.illegal.identifier.qml
      pop: true
