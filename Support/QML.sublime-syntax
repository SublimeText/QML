%YAML 1.2
---
version: 2
name: QML
file_extensions:
  - qml
  - qmltypes
scope: source.qml
extends: Packages/JavaScript/JavaScript.sublime-syntax
variables:
  identifier_continue: '[[:alnum:]_]'
  identifier: '\b[[:alpha:]_]{{identifier_continue}}*\b'
  identifier_title: '\b[[:upper:]]{{identifier_continue}}*\b'
  identifier_untitle: '\b[[:lower:]]{{identifier_continue}}*\b'
  identifier_handler: '\b(on)(_*[[:upper:]]{{identifier_continue}}*?)(Changed)?\b'
  property_name: (?:(?!{{reserved_word}})(?![[:upper:]])(?:{{identifier_start}}{{identifier_part}}*{{identifier_break}}))
  path: '({{identifier}}[ ]*\.[ ]*)*{{identifier}}'
  qml_builtin_type: |-
    (?x:
      # Basic Types Provided By The QML Language
      bool|double|enumeration|int|real|string|url|var|variant|
      # Basic Types Provided By QML Modules
      color|date|font|matrix4x4|point|quaternion|rect|size|vector2d|vector3d|vector4d
    ){{identifier_break}}

contexts:
  main:
    - include: statements-qml

  statements-qml:
    - match: (?=\S)
      push: statement-qml

  statement-qml:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.qml
      pop: true

    - match: \;
      scope: punctuation.terminator.statement.empty.qml
      pop: true

    - include: pragma-statement
    - include: import-statement
    - include: object-standalone

  expect-semicolon-qml:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - include: else-pop

  else-pop-at-eol:
    - include: else-pop
    - include: eol-pop

  eol-pop:
    - match: (?=\s*($|;))
      pop: true

  semicolon-or-eol-pop:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: (?=\s*$)
      pop: true

  pragma-statement:
    - match: \b(pragma)\s+(Singleton)\b
      scope: meta.pragma.qml
      captures:
        1: keyword.control.pragma.qml
        2: storage.modifier.singleton.qml

  import-statement:
    - match: import{{identifier_break}}
      scope: keyword.control.import.qml
      push:
        - import-meta
        - semicolon-or-eol-pop
        - expect-import-alias
        - expect-import-version
        - expect-import-location

  import-meta:
    - meta_include_prototype: false
    - meta_scope: meta.import.qml
    - include: immediately-pop

  expect-import-location:
    - include: import-string
    - include: qualified-name
    - include: else-pop-at-eol

  import-string:
    - include: literal-string
    - match: (?=`)
      set:
        - import-string-invalid-meta
        - literal-string-template

  import-string-invalid-meta:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.import-string.qml
    - include: immediately-pop

  expect-import-version:
    - include: import-version
    - include: else-pop-at-eol

  import-version:
    - match: '(\d+)(?:\s*(\.)\s*(\d+))?'
      scope: meta.number.version.qml
      captures:
        1: constant.numeric.value.qml
        2: punctuation.separator.decimal.qml
        3: constant.numeric.value.qml
      pop: true
    - match: (@)(?:{{identifier}})(@)
      scope: variable.other.cmake
      captures:
        1: punctuation.definition.variable.begin.cmake
        2: punctuation.definition.variable.end.cmake
      pop: true

  expect-import-alias:
    - include: import-alias
    - include: else-pop-at-eol

  import-alias:
    - match: as{{identifier_break}}
      scope: keyword.operator.as.qml
      set:
        - meta_scope: meta.import.alias.qml
        - match: '{{identifier_title}}'
          scope: entity.name.namespace.qml
          pop: true
        - include: import-illegal-names

  import-illegal-names:
    - match: '[^\s]+'
      scope: invalid.illegal.name.import.qml
      pop: true

  qualified-name:
    - match: (?={{identifier}})
      set:
        - qualified-name-meta
        - qualified-name-recursive

  qualified-name-meta:
    - meta_include_prototype: false
    - meta_scope: meta.path.qml
    - include: immediately-pop

  qualified-name-recursive:
    - match: '{{identifier}}'
      scope: meta.generic-name.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: qualified-name-recursive
        - include: else-pop-at-eol

  expect-object-standalone:
    - include: object-standalone
    - include: else-pop

  object-standalone:
    - match: '(?=[[:upper:]])'
      set:
        - object-block
        - expect-object-type-name

  expect-object-type-name:
    # either Namespace.Object or just Object
    - match: (?={{identifier_title}})
      set: object-type-name

  object-type-name:
    # just Object
    - match: '{{identifier_title}}(?!\s*\.)'
      scope: support.class.qml
      pop: true

    # Namespace.Object
    - match: '{{identifier_title}}'
      scope: support.class.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: object-type-name

    - include: else-pop

  object-block:
    - match: \{
      scope: punctuation.section.block.begin.qml
      set:
        - meta_scope: meta.block.qml
        - match: \}
          scope: punctuation.section.block.end.qml
          pop: true
        - include: object-block-statements

  object-block-statements:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.qml
      # pop: true  # Don't! Let the object flow further

    - match: (?=\S)
      push: object-block-statement

  object-block-statement:
    - match: \;
      scope: invalid.illegal.unexpected-terminator.qml
      pop: true

    # prefixed (easily recognilable)
    - include: inline-component
    - include: regular-qml-method
    - include: regular-qml-signal
    - include: property-declaration

    # unprefixed (may require specifix order to work)
    - include: signal-handler-non-attached
    - include: object-id
    - include: object-standalone

    # temporarily allow random nested blocks until the syntax is complete
    - include: block

  object-id:
    - match: id{{identifier_break}}
      scope: keyword.other.id.qml
      set:
        - object-id-meta
        - object-id-name
        - property-binding-expect-colon

  object-id-meta:
    - meta_include_prototype: false
    - meta_scope: meta.binding.property.qml
    - include: immediately-pop

  object-id-name:
    - match: '(?={{non_reserved_identifier}}){{identifier_untitle}}'
      scope: entity.name.label.qml
      set:
        - include: semicolon-or-eol-pop
        - match: '\S+'
          scope: invalid.illegal.identifier.qml
          pop: true
    - match: '\S+'
      scope: invalid.illegal.identifier.qml
      pop: true
    - include: semicolon-or-eol-pop

  property-binding-expect-colon:
    - match: ':'
      scope: keyword.operator.assignment.qml
      pop: true
    - match: '\S+'
      scope: invalid.illegal.qml
      pop: true

  property-declaration:
    - include: required-property
    - include: non-required-property

  property-binding-meta:
    - meta_include_prototype: false
    - meta_scope: meta.binding.property.qml
    - include: immediately-pop

  required-property:
    - match: required{{identifier_break}}
      scope: keyword.other.qml storage.modifier.required.qml
      set:
        - property-binding-meta
        - required-property-branch

  required-property-branch:
    - match: '(?={{non_reserved_identifier}})'
      branch_point: required-property-fail
      branch:
        - maybe-simple-required-property
        - required-property-extended
      pop: true
    - include: illegal-property-name

  maybe-simple-required-property:
    - match: '{{property_name}}'
      scope: meta.binding.name.qml variable.other.member.qml
      set: maybe-inside-simple-required-property
    - include: illegal-property-name

  maybe-inside-simple-required-property:
    - include: illegal-binding
    - include: eol-pop
    - match: '\S'
      fail: required-property-fail

  required-property-extended:
    - match: property{{identifier_break}}
      scope: keyword.declaration.qml
      set:
        - expect-illegal-binding
        - required-property-name
        - required-property-type

    - include: semicolon-or-eol-pop
    - match: '\S+'
      scope: invalid.illegal.expected-property.qml
      pop: true

  required-property-type:
    - include: expect-property-type-member

  required-property-name:
    - match: '{{property_name}}'
      scope: meta.binding.name.qml variable.other.member.qml
      pop: true

    - match: '\S+'
      scope: invalid.illegal.expected-identifier.qml
      pop: true

  illegal-property-name:
    - include: semicolon-or-eol-pop
    - match: '\S+'
      scope: invalid.illegal.expected-name.qml
      pop: true

  non-required-property:
    - match: (?=(?:readonly|default|property){{identifier_break}})
      set:
        - property-binding-meta
        - expect-binding
        - expect-property-name
        - expect-property-type-member-or-alias
        - expect-property-keyword
        - expect-property-qualifiers

  expect-property-qualifiers:
    - include: property-keyword-readonly
    - include: property-keyword-default
    - include: else-pop-at-eol

  property-keyword-readonly:
    - match: readonly{{identifier_break}}
      scope: keyword.other.qml storage.modifier.required.qml

  property-keyword-default:
    - match: default{{identifier_break}}
      scope: keyword.other.qml storage.modifier.default.qml

  expect-property-keyword:
    - match: property{{identifier_break}}
      scope: keyword.declaration.qml
      pop: true
    - include: else-pop-at-eol

  expect-property-name:
    - include: property-name
    - include: illegal-property-name

  property-name:
    - match: '{{property_name}}'
      scope: meta.binding.name.qml variable.other.member.qml
      pop: true

  expect-binding:
    - include: binding
    - include: else-pop-at-eol

  binding:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: ':'
      scope: punctuation.separator.mapping.key-value.qml
      set: expect-binding-value

  expect-illegal-binding:
    - include: illegal-binding
    - include: else-pop-at-eol

  illegal-binding:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: ':'
      scope: punctuation.separator.mapping.key-value.qml invalid.illegal.binding.qml
      set: expect-binding-value

  expect-binding-value:
    # TODO: include QML object declaration
    - match: (?=\S)
      set: property-binding-value

  property-binding-value:
    - include: class
    - include: regular-function
    - include: conditionals
    - include: block
    - include: expression-statement
    - include: else-pop-at-eol

  # override here, so we can parse if-elseif-else chain in one go
  conditionals:
    - match: if{{identifier_break}}
      scope: keyword.control.conditional.if.js
      set:
        - conditional-meta
        - expect-condition-continuation
        - statement
        - expect-parenthesized-expression

    - include: conditional

  expect-condition-continuation:
    - match: else\s+if{{identifier_break}}
      scope: keyword.control.conditional.elseif.js
      set:
        - expect-condition-continuation
        - statement
        - expect-parenthesized-expression

    - match: else{{identifier_break}}
      scope: keyword.control.conditional.else.js
      set:
        - statement

    - include: else-pop

  property-type-fallback:
    - match: '{{identifier}}'
      # Don't highlight unknown type
      pop: true
    - include: else-pop-at-eol

  expect-property-type-member-or-alias:
    - include: property-type-member-or-alias

    - include: property-type-fallback

  property-type-member-or-alias:
    - include: property-type-alias
    - include: property-type-member

  expect-property-type-member:
    - include: property-type-member

    - include: property-type-fallback

  property-type-member:
    - include: property-type-list
    - include: property-type-simple

  expect-property-type-simple:
    - include: property-type-simple

    - include: property-type-fallback

  property-type-simple:
    - include: property-type-basic
    - include: expect-object-type-name

  expect-property-type-basic:
    - include: property-type-basic

    - include: property-type-fallback

  property-type-basic:
    - match: (?={{qml_builtin_type}})
      set:
        - property-type-basic-meta
        - property-type-basic-content

  property-type-basic-meta:
    - meta_include_prototype: false
    - meta_scope: storage.type.qml
    - include: immediately-pop

  property-type-basic-content:
    - match: 'variant{{identifier_break}}'
      scope: support.other.qml invalid.deprecated.variant.qml
      pop: true
    - match: 'var{{identifier_break}}'
      scope: support.other.qml
      pop: true
    - match: '{{qml_builtin_type}}'
      scope: support.type.qml
      pop: true

  expect-property-type-alias:
    - include: property-type-alias

    - include: property-type-fallback

  property-type-alias:
    - match: alias{{identifier_break}}
      scope: keyword.other.qml
      pop: true

  expect-property-type-list:
    - include: property-type-list

    - include: property-type-fallback

  property-type-list:
    - match: list{{identifier_break}}
      scope: storage.type.qml support.other.qml
      set: list-type-generics

  list-type-generics:
    - match: '<'
      scope: punctuation.definition.generic.begin.qml
      set:
        - list-type-generics-end
        - expect-property-type-simple

  list-type-generics-end:
    - match: '>'
      scope: punctuation.definition.generic.end.qml
      pop: true

  # BEGIN methods
  # Copied from JavaScript syntax, replaced 'function-' with 'qml-method-', added parameter types.
  regular-qml-method:
    - match: (?={{func_lookahead}})
      set: qml-method-declaration

  qml-method-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - function-meta
        - function-declaration-expect-body
        - qml-method-declaration-expect-return-type
        - qml-method-declaration-expect-parameters
        - function-declaration-expect-name
        - function-declaration-expect-generator-star
        - function-declaration-expect-function-keyword
        - function-declaration-expect-async

  qml-method-declaration-expect-parameters:
    - include: qml-method-declaration-parameters
    - include: else-pop

  qml-method-declaration-parameters:
    - match: \(
      scope: punctuation.section.group.begin.qml
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.parameters.qml
        - match: \)
          scope: punctuation.section.group.end.qml
          pop: true
        - include: qml-method-parameter-binding-list

  qml-method-parameter-binding-list:
    - match: ','
      scope: punctuation.separator.parameter.function.qml
    - include: function-parameter-binding-spread
    - match: (?={{binding_pattern_lookahead}})
      push: qml-method-parameter
    - include: else-pop

  qml-method-parameter:
    - match: ''
      set:
        - initializer
        - qml-method-parameter-expect-type  # this is added
        - qml-method-parameter-binding-pattern

  qml-method-parameter-binding-pattern:
    - include: function-parameter-binding-name
    # destructuring won't always work in QML (as of Qt 5/6), but hopefully they will someday.
    - include: function-parameter-binding-array-destructuring
    - include: function-parameter-binding-object-destructuring
    - include: else-pop

  qml-method-parameter-expect-type:
    - match: ':'
      scope: punctuation.separator.type.qml
      set: property-type-member
    - include: else-pop

  qml-method-declaration-expect-return-type:
    - match: ':'
      scope: punctuation.separator.type.qml
      set: property-type-member
    - include: else-pop

  # END methods

  # BEGIN signals

  regular-qml-signal:
    - match: (?=signal{{identifier_break}})
      set: signal-declaration

  signal-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - signal-meta
        - expect-semicolon
        - signal-declaration-expect-parameters
        - function-declaration-expect-name
        - signal-declaration-expect-keyword

  signal-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.js
    - include: immediately-pop

  signal-declaration-expect-keyword:
    - match: signal{{identifier_break}}
      scope: keyword.declaration.function.qml
      pop: true
    - include: else-pop

  signal-declaration-expect-parameters:
    - include: signal-declaration-parameters
    - include: else-pop

  signal-declaration-parameters:
    - match: \(
      scope: punctuation.section.group.begin.qml
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.parameters.qml
        - match: \)
          scope: punctuation.section.group.end.qml
          pop: true
        - include: signal-parameter-list

  signal-parameter-list:
    - match: ','
      scope: punctuation.separator.parameter.function.qml
    - match: (?={{identifier}})
      push: signal-parameter
    - include: else-pop

  signal-parameter:
    - match: (?={{identifier}})
      pop: true
      branch:
        - try-signal-parameter-name-first
        - try-signal-parameter-type-first
        - signal-parameter-untyped
      branch_point: signal-parameter-signature
    - include: else-pop

  # TypeScript style: `param1: string`
  try-signal-parameter-name-first:
    - match: (?={{identifier}})
      set:
        - expect-signal-parameter-type
        - maybe-signal-parameter-colon
        - expect-signal-parameter-name
    - match: (?=\S)
      fail: signal-parameter-signature
    - include: else-pop

  maybe-signal-parameter-colon:
    - match: ':'
      scope: punctuation.separator.type.qml
      pop: true
    - match: (?=\S)
      fail: signal-parameter-signature

  expect-signal-parameter-name:
    - match: (?={{identifier_name}})
      set: signal-parameter-name

    - include: else-pop

  signal-parameter-name:
    - match: '{{non_reserved_identifier}}'
      scope: meta.binding.name.js variable.parameter.function.js
      pop: true
    - match: '{{identifier_name}}'
      scope: invalid.illegal.identifier.js meta.binding.name.js variable.parameter.function.js
      pop: true

  signal-parameter-name-fail-on-missing:
    - match: (?=,|\))
      fail: signal-parameter-signature
    - match: (?=\S)
      set: signal-parameter-name

  expect-signal-parameter-type:
    # intentionally skip newlines
    - match: (?=\S)
      set: expect-property-type-simple
    - include: else-pop

  # C/C++ style: `string param1`
  try-signal-parameter-type-first:
    - match: ''
      set:
        - signal-parameter-name-fail-on-missing
        - expect-signal-parameter-type

  signal-parameter-untyped:
    - match: ''
      set:
        - untyped-meta
        - expect-signal-parameter-name

  untyped-meta:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.expected-type.qml
    - include: immediately-pop

  # END signals

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.qml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.qml string.quoted.single.qml
        - match: \'
          scope: punctuation.definition.string.end.qml
          pop: true
        # Qt/QML extension: newlines are allowed in double-quoted strings
        - match: \n
          scope: invalid.deprecated.newline.qml
          # pop: true
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.qml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.qml string.quoted.double.qml
        - match: \"
          scope: punctuation.definition.string.end.qml
          pop: true
        # Qt/QML extension: newlines are allowed in double-quoted strings
        - match: \n
          scope: invalid.deprecated.newline.qml
          # pop: true
        - include: string-content

  # BEGIN component

  inline-component:
    - match: component{{identifier_break}}
      scope: keyword.declaration.component.qml
      set:
        - inline-component-meta
        - expect-object-standalone
        - inline-component-expect-colon-separator
        - inline-component-expect-name

  inline-component-meta:
    - meta_include_prototype: false
    - meta_scope: meta.component.qml
    - include: immediately-pop

  inline-component-expect-name:
    - include: inline-component-name
    - include: else-pop

  inline-component-name:
    - match: '{{identifier_title}}'
      scope: entity.name.class.qml
      pop: true

  inline-component-expect-colon-separator:
    - match: ':'
      scope: punctuation.separator.type.qml
      pop: true
    - include: else-pop

  # END component

  # BEGIN handlers

  signal-handler-non-attached:
    - match: (?={{identifier_handler}})
      set:
        - signal-binding-meta
        - expect-binding
        - signal-handler-name

  signal-binding-meta:
    - meta_include_prototype: false
    - meta_scope: meta.handler.qml
    - include: immediately-pop

  signal-handler-name:
    - match: '{{identifier_handler}}'
      scope: meta.binding.name.qml variable.function.qml
      captures:
        2: markup.underline.qml
      pop: true

  # END handlers
