%YAML 1.2
---
version: 2
name: QML
file_extensions:
  - qml
  - qmltypes
scope: source.qml
extends: Packages/JavaScript/JavaScript.sublime-syntax
variables:
  identifier_continue: '[[:alnum:]_]'
  identifier: '\b[[:alpha:]_]{{identifier_continue}}*\b'
  identifier_title: '\b[[:upper:]]{{identifier_continue}}*\b'
  identifier_untitle: '\b_*[[:lower:]]{{identifier_continue}}*\b'
  identifier_handler: '\b(on)(_*[[:upper:]]{{identifier_continue}}*?)(Changed)?\b'
  property_name: (?:(?!{{reserved_word}})(?![[:upper:]])(?:{{identifier_start}}{{identifier_part}}*{{identifier_break}}))
  path: '({{identifier}}[ ]*\.[ ]*)*{{identifier}}'
  qml_builtin_type: |-
    (?x:
      # Basic Types Provided By The QML Language
      bool|double|enumeration|int|real|string|url|var|variant|
      # Basic Types Provided By QML Modules
      color|date|font|matrix4x4|point|quaternion|rect|size|vector2d|vector3d|vector4d
    ){{identifier_break}}

contexts:
  main:
    - include: statements-qml

  statements-qml:
    - match: (?=\S)
      push: statement-qml

  statement-qml:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.qml
      pop: true

    - match: \;
      scope: punctuation.terminator.statement.empty.qml
      pop: true

    - include: pragma-statement
    - include: import-statement
    - include: object-standalone

  expect-semicolon-qml:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - include: else-pop

  else-pop-at-eol:
    - include: else-pop
    - include: eol-pop

  eol-pop:
    - match: (?=\s*($|;|\}))
      pop: true

  semicolon-or-eol-pop:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: (?=\s*$)
      pop: true

  pragma-statement:
    - match: \b(pragma)\s+(Singleton)\b
      scope: meta.pragma.qml
      captures:
        1: keyword.control.pragma.qml
        2: storage.modifier.singleton.qml

  import-statement:
    - match: import{{identifier_break}}
      scope: keyword.control.import.qml
      push:
        - import-meta
        - semicolon-or-eol-pop
        - expect-import-alias
        - expect-import-version
        - expect-import-location

  import-meta:
    - meta_include_prototype: false
    - meta_scope: meta.import.qml
    - include: immediately-pop

  expect-import-location:
    - include: import-string
    - include: qualified-name
    - include: else-pop-at-eol

  import-string:
    - include: literal-string
    - match: (?=`)
      set:
        - import-string-invalid-meta
        - literal-string-template

  import-string-invalid-meta:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.import-string.qml
    - include: immediately-pop

  expect-import-version:
    - include: import-version
    - include: else-pop-at-eol

  import-version:
    - match: '(\d+)(?:\s*(\.)\s*(\d+))?'
      scope: meta.number.version.qml
      captures:
        1: constant.numeric.value.qml
        2: punctuation.separator.decimal.qml
        3: constant.numeric.value.qml
      pop: true
    - match: (@)(?:{{identifier}})(@)
      scope: variable.other.cmake
      captures:
        1: punctuation.definition.variable.begin.cmake
        2: punctuation.definition.variable.end.cmake
      pop: true

  expect-import-alias:
    - include: import-alias
    - include: else-pop-at-eol

  import-alias:
    - match: as{{identifier_break}}
      scope: keyword.operator.as.qml
      set:
        - meta_scope: meta.import.alias.qml
        - match: '{{identifier_title}}'
          scope: entity.name.namespace.qml
          pop: true
        - include: import-illegal-names

  import-illegal-names:
    - match: '[^\s]+'
      scope: invalid.illegal.name.import.qml
      pop: true

  qualified-name:
    - match: (?={{identifier}})
      set:
        - qualified-name-meta
        - qualified-name-recursive

  qualified-name-meta:
    - meta_include_prototype: false
    - meta_scope: meta.path.qml
    - include: immediately-pop

  qualified-name-recursive:
    - match: '{{identifier}}'
      scope: meta.generic-name.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: qualified-name-recursive
        - include: else-pop-at-eol

  expect-object-standalone:
    - include: object-standalone
    - include: else-pop

  object-standalone:
    - match: (?={{identifier_title}})
      set:
        - expect-object-block
        - expect-object-type-name

  expect-object-type-name:
    - match: (?={{identifier_title}})
      set: object-type-name

  # either Namespace.Object or just Object
  object-type-name:
    # just Object
    - match: '{{identifier_title}}(?!\s*\.)'
      scope: support.class.qml
      pop: true

    # Namespace.Object
    - match: '{{identifier_title}}'
      scope: support.class.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: object-type-name

    - include: else-pop

  # same as above, but fails with not-standalone-object
  try-standalone-object-type-name:
    - match: (?={{identifier_title}})
      set: standalone-object-type-name

    - match: (?=\S)
      fail: not-standalone-object

  standalone-object-type-name:
    - match: '{{identifier_title}}(?!\s*\.)'
      scope: support.class.qml
      pop: true

    - match: '{{identifier_title}}'
      scope: support.class.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: standalone-object-type-name

    - match: (?=\S)
      fail: not-standalone-object

  # same as above, but fails with not-value-object
  try-value-object-type-name:
    - match: (?={{identifier_title}})
      set: value-object-type-name

    - match: (?=\S)
      fail: not-value-object

  value-object-type-name:
    - match: '{{identifier_title}}(?!\s*\.)'
      scope: support.class.qml
      pop: true

    - match: '{{identifier_title}}'
      scope: support.class.qml
      set:
        - match: \.
          scope: punctuation.accessor.qml
          set: value-object-type-name

    - match: (?=\S)
      fail: not-value-object

  expect-object-block:
    - include: object-block
    - include: else-pop

  object-block:
    - match: \{
      scope: punctuation.section.block.begin.qml
      set:
        - meta_scope: meta.block.qml
        - match: \}
          scope: punctuation.section.block.end.qml
          pop: true
        - include: object-block-statements

  object-block-statements:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.qml
      # pop: true  # Don't! Let the object flow further

    - match: (?=\S)
      push: object-block-statement

  object-block-statement:
    - match: \;
      scope: invalid.illegal.unexpected-terminator.qml
      pop: true

    # prefixed (easily recognilable)
    - include: inline-component
    - include: enum-declaration
    - include: regular-qml-method
    - include: regular-qml-signal
    - include: property-declaration

    # unprefixed (may require specifix order to work)
    - include: object-id
    - include: signal-handler-non-attached
    - include: property-binding
    - include: standalone-object-or-attached-member

    # temporarily allow random nested blocks until the syntax is complete
    - include: block

  object-id:
    - match: id{{identifier_break}}
      scope: keyword.other.id.qml
      set:
        - object-id-meta
        - expect-semicolon-qml
        - object-id-name
        - property-binding-expect-colon

  object-id-meta:
    - meta_include_prototype: false
    - meta_scope: meta.binding.property.qml
    - include: immediately-pop

  object-id-name:
    - match: '(?={{non_reserved_identifier}}){{identifier_untitle}}'
      scope: entity.name.label.qml
      set:
        - include: else-pop-at-eol
        - match: '\S+'
          scope: invalid.illegal.identifier.qml
          pop: true
    - match: '\S+'
      scope: invalid.illegal.identifier.qml
      pop: true
    - include: else-pop-at-eol

  property-binding-expect-colon:
    - match: ':'
      scope: keyword.operator.assignment.qml
      pop: true
    - match: '\S+'
      scope: invalid.illegal.qml
      pop: true

  property-declaration:
    - include: required-property
    - include: default-property
    - include: other-property

  property-binding-meta:
    - meta_include_prototype: false
    - meta_scope: meta.binding.property.qml
    - include: immediately-pop

  required-property:
    - match: required{{identifier_break}}
      scope: keyword.other.qml storage.modifier.required.qml
      set:
        - property-binding-meta
        - required-property-branch

  required-property-branch:
    - match: default{{identifier_break}}
      scope: keyword.other.qml storage.modifier.default.qml
      set: required-property-extended

    - match: '(?={{non_reserved_identifier}})'
      branch_point: required-property-fail
      branch:
        - maybe-simple-required-property
        - required-property-extended
      pop: true
    - include: illegal-property-name

  maybe-simple-required-property:
    - match: '{{property_name}}'
      scope: meta.binding.name.qml variable.other.member.qml
      set: maybe-inside-simple-required-property
    - include: illegal-property-name

  maybe-inside-simple-required-property:
    - include: illegal-binding
    - include: eol-pop
    - match: '\S'
      fail: required-property-fail

  required-property-extended:
    - match: property{{identifier_break}}
      scope: keyword.declaration.qml
      set:
        - expect-illegal-binding
        - required-property-name
        - required-property-type

    - include: semicolon-or-eol-pop
    - match: '\S+'
      scope: invalid.illegal.expected-property.qml
      pop: true

  required-property-type:
    - include: expect-property-type-member

  required-property-name:
    - match: '{{property_name}}'
      scope: meta.binding.name.qml variable.other.member.qml
      pop: true

    - match: '\S+'
      scope: invalid.illegal.expected-identifier.qml
      pop: true

  illegal-property-name:
    - include: semicolon-or-eol-pop
    - match: '(?![\{\}])\S+'
      scope: invalid.illegal.expected-name.qml
      pop: true
    - include: else-pop

  default-property:
    - match: default{{identifier_break}}
      scope: keyword.other.qml storage.modifier.default.qml
      set:
        - property-binding-meta
        - default-property-content

  default-property-content:
    - match: required{{identifier_break}}
      scope: keyword.other.qml storage.modifier.required.qml
      set: required-property-extended

    - match: (?=\S)
      set:
        - expect-binding
        - expect-property-name
        - expect-property-type-member
        - expect-property-keyword

    - include: semicolon-or-eol-pop

  other-property:
    - match: (?=property{{identifier_break}})
      branch_point: not-property-declaration
      branch:
        - try-property-declaration
        - property-binding

    - match: (?=readonly{{identifier_break}})
      set:
        - property-binding-meta
        - expect-binding
        - expect-property-name
        - expect-property-type-member-or-alias
        - expect-property-keyword
        - property-keyword-readonly

  try-property-declaration:
    - match: (?=property{{identifier_break}})
      set:
        - immediately-pop-2
        - property-binding-meta
        - expect-binding
        - expect-property-name
        - expect-property-type-member-or-alias
        - fail-on-semicolon
        - expect-property-keyword

  fail-on-semicolon:
    - match: ':'
      fail: not-property-declaration
    - include: else-pop

  property-keyword-readonly:
    - match: readonly{{identifier_break}}
      scope: keyword.other.qml storage.modifier.required.qml
      pop: true

  expect-property-keyword:
    - match: property{{identifier_break}}
      scope: keyword.declaration.qml
      pop: true
    - include: else-pop-at-eol

  expect-intercepted-property:
    - match: (?={{identifier}})
      set:
        - meta_scope: meta.binding.name.qml
        - match: (?={{identifier_title}})
          push: object-type-name
        - match: '{{property_name}}'
          scope: variable.other.member.qml
        - match: \.
          scope: punctuation.accessor.qml
        - include: illegal-property-name
    - include: illegal-property-name

  expect-property-name:
    - include: property-name
    - include: illegal-property-name

  property-name:
    - match: '{{property_name}}'
      scope: meta.binding.name.qml variable.other.member.qml
      pop: true

  property-binding:
    - match: (?={{identifier_untitle}})
      set:
        - property-binding-meta
        - property-binding-or-group
        - expect-property-name

  property-binding-inside-group:
    - include: signal-handler-non-attached
    - match: (?={{identifier_untitle}})
      set:
        # Don't nest meta scopes
        - property-binding-or-group
        - expect-property-name

  property-binding-or-group:
    - match: \.
      scope: punctuation.accessor.qml
      set:
        - include: property-binding-inside-group
        - include: else-pop
    - match: \{
      scope: punctuation.section.block.begin.qml
      set:
        - meta_scope: meta.block.qml
        - match: \}
          scope: punctuation.section.block.end.qml
          pop: true
        - include: object-block-statements
    - include: binding
    - include: else-pop-at-eol

  standalone-object-or-attached-member:
    - match: (?={{identifier_title}})
      pop: true
      branch_point: not-standalone-object
      branch:
        - try-standalone-object-interceptor
        - try-standalone-object
        - attached-member

  try-standalone-object-interceptor:
    - match: (?={{identifier_title}})
      set:
        - expect-object-block
        - try-property-interceptor
        - try-standalone-object-type-name

  try-property-interceptor:
    - match: on{{identifier_break}}
      scope: keyword.other.on.qml
      set: expect-intercepted-property

    - match: (?=\S)
      fail: not-standalone-object

  try-standalone-object:
    - match: (?={{identifier_title}})
      set:
        - try-standalone-object-block
        - try-standalone-object-type-name

  try-standalone-object-block:
    - match: (?=\{)
      set: object-block

    - match: (?=\S)
      fail: not-standalone-object

  attached-member:
    - include: support-attached
    - include: regular-attached

  regular-attached:
    - match: (?={{identifier_title}})
      set:
        - expect-attached-member
        - expect-object-type-name

  expect-attached-member:
    - include: signal-handler-non-attached
    - include: property-binding
    - include: else-pop

  expect-binding:
    - include: binding
    - include: else-pop-at-eol

  binding:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: ':'
      scope: punctuation.separator.mapping.key-value.qml
      set: binding-value

  expect-illegal-binding:
    - include: illegal-binding
    - include: else-pop-at-eol

  illegal-binding:
    - match: \;
      scope: punctuation.terminator.statement.qml
      pop: true
    - match: ':'
      scope: punctuation.separator.mapping.key-value.qml invalid.illegal.binding.qml
      set: binding-value

  binding-value:
    - match: (?=\S)
      pop: true
      branch_point: not-value-object
      branch:
        - try-value-object
        - maybe-array-of-objects
        - binding-expression

  binding-expression:
    - include: class
    - include: regular-function
    - include: conditionals
    - include: block
    - include: expression-statement

    - include: else-pop-at-eol

  try-value-object:
    - match: (?={{identifier_title}})
      set:
        - try-value-object-block
        - try-value-object-type-name
    - match: '\S'
      fail: not-value-object

  try-value-object-block:
    - match: (?=\{)
      set: object-block

    - match: '\S'
      fail: not-value-object

  maybe-array-of-objects:
    - match: '\['
      scope: punctuation.section.sequence.begin.qml
      set:
        - maybe-array-of-objects-meta
        # Only fail on first object. If this one succeeds, others shall be parsed as objects too.
        - array-of-objects-content
        # And if it's an empty array, fallback to JavaScript expression
        - try-value-object
    - match: '\S'
      fail: not-value-object

  maybe-array-of-objects-meta:
    - meta_include_prototype: false
    - meta_scope: meta.sequence.qml
    - include: immediately-pop

  array-of-objects-content:
    - match: \,
      scope: punctuation.separator.comma.qml
    - match: '\]'
      scope: punctuation.section.sequence.end.qml
      pop: true
    - match: (?={{identifier_title}})
      push: object-standalone
    - match: (?=\S)
      push:
        - array-of-objects-content-invalid-meta
        - expression-begin

  array-of-objects-content-invalid-meta:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.expected-object.qml
    - include: immediately-pop

  # override here, so we can parse if-elseif-else chain in one go
  conditionals:
    - match: if{{identifier_break}}
      scope: keyword.control.conditional.if.js
      set:
        - conditional-meta
        - expect-condition-continuation
        - statement
        - expect-parenthesized-expression

    - include: conditional

  expect-condition-continuation:
    - match: else\s+if{{identifier_break}}
      scope: keyword.control.conditional.elseif.js
      set:
        - expect-condition-continuation
        - statement
        - expect-parenthesized-expression

    - match: else{{identifier_break}}
      scope: keyword.control.conditional.else.js
      set:
        - statement

    - include: else-pop

  property-type-fallback:
    - match: '{{identifier}}'
      # Don't highlight unknown type
      pop: true
    - include: else-pop-at-eol

  expect-property-type-member-or-alias:
    - include: property-type-member-or-alias

    - include: property-type-fallback

  property-type-member-or-alias:
    - include: property-type-alias
    - include: property-type-member

  expect-property-type-member:
    - include: property-type-member

    - include: property-type-fallback

  property-type-member:
    - include: property-type-list
    - include: property-type-simple

  expect-property-type-simple:
    - include: property-type-simple

    - include: property-type-fallback

  property-type-simple:
    - include: property-type-basic
    - include: expect-object-type-name

  expect-property-type-basic:
    - include: property-type-basic

    - include: property-type-fallback

  property-type-basic:
    - match: (?={{qml_builtin_type}})
      set:
        - property-type-basic-meta
        - property-type-basic-content

  property-type-basic-meta:
    - meta_include_prototype: false
    - meta_scope: storage.type.qml
    - include: immediately-pop

  property-type-basic-content:
    - match: 'variant{{identifier_break}}'
      scope: support.other.qml invalid.deprecated.variant.qml
      pop: true
    - match: 'var{{identifier_break}}'
      scope: support.other.qml
      pop: true
    - match: '{{qml_builtin_type}}'
      scope: support.type.qml
      pop: true

  expect-property-type-alias:
    - include: property-type-alias

    - include: property-type-fallback

  property-type-alias:
    - match: alias{{identifier_break}}
      scope: keyword.other.qml
      pop: true

  expect-property-type-list:
    - include: property-type-list

    - include: property-type-fallback

  property-type-list:
    - match: list{{identifier_break}}
      scope: storage.type.qml support.other.qml
      set: list-type-generics

  list-type-generics:
    - match: '<'
      scope: punctuation.definition.generic.begin.qml
      set:
        - list-type-generics-end
        - expect-property-type-simple

  list-type-generics-end:
    - match: '>'
      scope: punctuation.definition.generic.end.qml
      pop: true
    - include: else-pop

  # BEGIN methods
  # Copied from JavaScript syntax, replaced 'function-' with 'qml-method-', added parameter types.
  regular-qml-method:
    - match: (?={{func_lookahead}})
      set: qml-method-declaration

  qml-method-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - function-meta
        - function-declaration-expect-body
        - qml-method-declaration-expect-return-type
        - qml-method-declaration-expect-parameters
        - function-declaration-expect-name
        - function-declaration-expect-generator-star
        - function-declaration-expect-function-keyword
        - function-declaration-expect-async

  qml-method-declaration-expect-parameters:
    - include: qml-method-declaration-parameters
    - include: else-pop

  qml-method-declaration-parameters:
    - match: \(
      scope: punctuation.section.group.begin.qml
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.parameters.qml
        - match: \)
          scope: punctuation.section.group.end.qml
          pop: true
        - include: qml-method-parameter-binding-list

  qml-method-parameter-binding-list:
    - match: ','
      scope: punctuation.separator.parameter.function.qml
    - include: function-parameter-binding-spread
    - match: (?={{binding_pattern_lookahead}})
      push: qml-method-parameter
    - include: else-pop

  qml-method-parameter:
    - match: ''
      set:
        - initializer
        - qml-method-parameter-expect-type  # this is added
        - qml-method-parameter-binding-pattern

  qml-method-parameter-binding-pattern:
    - include: function-parameter-binding-name
    # destructuring won't always work in QML (as of Qt 5/6), but hopefully they will someday.
    - include: function-parameter-binding-array-destructuring
    - include: function-parameter-binding-object-destructuring
    - include: else-pop

  qml-method-parameter-expect-type:
    - match: ':'
      scope: punctuation.separator.type.qml
      set: property-type-member
    - include: else-pop

  qml-method-declaration-expect-return-type:
    - match: ':'
      scope: punctuation.separator.type.qml
      set: property-type-member
    - include: else-pop

  # END methods

  # BEGIN signals

  regular-qml-signal:
    - match: (?=signal{{identifier_break}})
      set: signal-declaration

  signal-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - signal-meta
        - expect-semicolon
        - signal-declaration-expect-parameters
        - function-declaration-expect-name
        - signal-declaration-expect-keyword

  signal-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.js
    - include: immediately-pop

  signal-declaration-expect-keyword:
    - match: signal{{identifier_break}}
      scope: keyword.declaration.function.qml
      pop: true
    - include: else-pop

  signal-declaration-expect-parameters:
    - include: signal-declaration-parameters
    - include: else-pop

  signal-declaration-parameters:
    - match: \(
      scope: punctuation.section.group.begin.qml
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.parameters.qml
        - match: \)
          scope: punctuation.section.group.end.qml
          pop: true
        - include: signal-parameter-list

  signal-parameter-list:
    - match: ','
      scope: punctuation.separator.parameter.function.qml
    - match: (?={{identifier}})
      push: signal-parameter
    - include: else-pop

  signal-parameter:
    - match: (?={{identifier}})
      pop: true
      branch:
        - try-signal-parameter-name-first
        - try-signal-parameter-type-first
        - signal-parameter-untyped
      branch_point: signal-parameter-signature
    - include: else-pop

  # TypeScript style: `param1: string`
  try-signal-parameter-name-first:
    - match: (?={{identifier}})
      set:
        - expect-signal-parameter-type
        - maybe-signal-parameter-colon
        - expect-signal-parameter-name
    - match: (?=\S)
      fail: signal-parameter-signature
    - include: else-pop

  maybe-signal-parameter-colon:
    - match: ':'
      scope: punctuation.separator.type.qml
      pop: true
    - match: (?=\S)
      fail: signal-parameter-signature

  expect-signal-parameter-name:
    - match: (?={{identifier_name}})
      set: signal-parameter-name

    - include: else-pop

  signal-parameter-name:
    - match: '{{non_reserved_identifier}}'
      scope: meta.binding.name.js variable.parameter.function.js
      pop: true
    - match: '{{identifier_name}}'
      scope: invalid.illegal.identifier.js meta.binding.name.js variable.parameter.function.js
      pop: true

  signal-parameter-name-fail-on-missing:
    - match: (?=,|\))
      fail: signal-parameter-signature
    - match: (?=\S)
      set: signal-parameter-name

  expect-signal-parameter-type:
    # intentionally skip newlines
    - match: (?=\S)
      set: expect-property-type-simple
    - include: else-pop

  # C/C++ style: `string param1`
  try-signal-parameter-type-first:
    - match: ''
      set:
        - signal-parameter-name-fail-on-missing
        - expect-signal-parameter-type

  signal-parameter-untyped:
    - match: ''
      set:
        - untyped-meta
        - expect-signal-parameter-name

  untyped-meta:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.expected-type.qml
    - include: immediately-pop

  # END signals

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.qml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.qml string.quoted.single.qml
        - match: \'
          scope: punctuation.definition.string.end.qml
          pop: true
        # Qt/QML extension: newlines are allowed in double-quoted strings
        - match: \n
          scope: invalid.deprecated.newline.qml
          # pop: true
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.qml
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.qml string.quoted.double.qml
        - match: \"
          scope: punctuation.definition.string.end.qml
          pop: true
        # Qt/QML extension: newlines are allowed in double-quoted strings
        - match: \n
          scope: invalid.deprecated.newline.qml
          # pop: true
        - include: string-content

  # BEGIN support

  support:
    - meta_append: false

    - include: support-variable-ecma
    - include: support-variable-console
    - include: support-variable-xhr

    - include: support-variable-qtqml
    - include: support-variable-qtquick
    - include: support-variable-qtquick-controls
    - include: support-variable-qtquick-dialogs
    - include: support-variable-qtquick-templates
    - include: support-variable-kde

  support-variable-xhr:
    - match: XMLHttpRequest{{identifier_break}}
      scope: support.class.dom.js
      pop: true

  support-variable-qtqml:
    - match: Binding{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtqml-binding
            - include: object-property
            - include: else-pop
        - include: else-pop

    # https://doc.qt.io/qt-5/qml-qtqml-qt.html
    - match: Qt{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtqml-qt
            - include: object-property
            - include: else-pop
        - include: else-pop

    # https://doc.qt.io/qt-5/qtqml-javascript-qmlglobalobject.html
    - match: (?:qsTr|qsTranslate|qsTrId|QT_TR_NOOP|QT_TRANSLATE_NOOP|QT_TRID_NOOP|gc|print){{identifier_break}}
      scope: support.function.qml
      pop: true

  support-property-qtqml-binding:
    - match: (?:RestoreNone|RestoreBinding|RestoreValue|RestoreBindingOrValue){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtqml-qt:
    - match: (?:Asynchronous|Synchronous){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

    # https://doc.qt.io/qt-5/qt.html
    # qtbase/src/corelib/global/qnamespace.h
    - match: |-
        (?x:(?:
        # ScrollBarPolicy
        ScrollBarAsNeeded|ScrollBarAlwaysOff|ScrollBarAlwaysOn
        # FocusPolicy
        |NoFocus|TabFocus|ClickFocus|StrongFocus|WheelFocus
        # ContextMenuPolicy
        |NoContextMenu|DefaultContextMenu|ActionsContextMenu|CustomContextMenu|PreventContextMenu
        # ArrowType
        |NoArrow|UpArrow|DownArrow|LeftArrow|RightArrow
        # ToolButtonStyle
        |ToolButtonIconOnly|ToolButtonTextOnly|ToolButtonTextBesideIcon|ToolButtonTextUnderIcon|ToolButtonFollowStyle
        # PenStyle
        |NoPen|SolidLine|DashLine|DotLine|DashDotLine|DashDotDotLine|CustomDashLine|MPenStyle
        # PenCapStyle
        |FlatCap|SquareCap|RoundCap|MPenCapStyle
        # PenJoinStyle
        |MiterJoin|BevelJoin|RoundJoin|SvgMiterJoin|MPenJoinStyle
        # BrushStyle
        |NoBrush|(?:Solid|Dense[1-7]|Hor|Ver|Cross|BDiag|FDiag|DiagCross|LinearGradient|RadialGradient|ConicalGradient|Texture)Pattern
        # FillRule
        |OddEvenFill|WindingFill
        # MaskMode
        |MaskInColor|MaskOutColor
        # BGMode
        |TransparentMode|OpaqueMode
        # ClipOperation
        |NoClip|ReplaceClip|IntersectClip
        # SizeMode
        |AbsoluteSize|RelativeSize
        # Axis
        |XAxis|YAxis|ZAxis
        # Corner
        |TopLeftCorner|TopRightCorner|BottomLeftCorner|BottomRightCorner
        # Edge
        |TopEdge|LeftEdge|RightEdge|BottomEdge
        # LayoutDirection
        |LeftToRight|RightToLeft|LayoutDirectionAuto
        # SizeHint
        |MinimumSize|PreferredSize|MaximumSize|MinimumDescent|NSizeHints
        # Orientation
        |Horizontal|Vertical
        # DropAction
        |CopyAction|MoveAction|LinkAction|ActionMask|TargetMoveAction|IgnoreAction
        # AlignmentFlag
        |Align(?:Left|Leading|Right|Trailing|HCenter|Justify|Absolute|Horizontal_Mask|Top|Bottom|VCenter|Baseline|Vertical_Mask|Center)
        # TextFlag
        |Text(?:SingleLine|DontClip|ExpandTabs|ShowMnemonic|WordWrap|WrapAnywhere|DontPrint|IncludeTrailingSpaces|HideMnemonic|JustificationForced|ForceLeftToRight|ForceRightToLeft|LongestVariant|BypassShaping)
        # SplitBehaviorFlags
        |(?:Keep|Skip)EmptyParts
        # DockWidgetArea - omited
        # ToolBarArea
        |LeftToolBarArea|RightToolBarArea|TopToolBarArea|BottomToolBarArea
        # TextFormat
        |PlainText|RichText|AutoText|MarkdownText
        # TextElideMode
        |ElideLeft|ElideRight|ElideMiddle|ElideNone
        # DateFormat
        |TextDate|ISODate|SystemLocaleDate|LocalDate|LocaleDate|SystemLocaleShortDate|SystemLocaleLongDate|DefaultLocaleShortDate|DefaultLocaleLongDate|RFC2822Date|ISODateWithMs
        # TimeSpec
        |LocalTime|UTC|OffsetFromUTC|TimeZone
        # DayOfWeek
        |Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday
        # CursorShape
        |ArrowCursor|UpArrowCursor|CrossCursor|WaitCursor|IBeamCursor|SizeVerCursor|SizeHorCursor|SizeBDiagCursor|SizeFDiagCursor|SizeAllCursor|BlankCursor|SplitVCursor|SplitHCursor|PointingHandCursor|ForbiddenCursor|WhatsThisCursor|BusyCursor|OpenHandCursor|ClosedHandCursor|DragCopyCursor|DragMoveCursor|DragLinkCursor|LastCursor|BitmapCursor|CustomCursor
        # GlobalColor
        |color0|color1|black|white|darkGray|gray|lightGray|red|green|blue|cyan|magenta|yellow|darkRed|darkGreen|darkBlue|darkCyan|darkMagenta|darkYellow|transparent
        # AspectRatioMode
        |IgnoreAspectRatio|KeepAspectRatio|KeepAspectRatioByExpanding
        # TransformationMode
        |FastTransformation|SmoothTransformation
        # ImageConversionFlag
        |ColorMode_Mask|AutoColor|ColorOnly|MonoOnly|AlphaDither_Mask|ThresholdAlphaDither|OrderedAlphaDither|DiffuseAlphaDither|NoAlpha|Dither_Mask|DiffuseDither|OrderedDither|ThresholdDither|DitherMode_Mask|AutoDither|PreferDither|AvoidDither|NoOpaqueDetection|NoFormatConversion
        # Key
        |Key_(?:Escape|Tab|Backtab|Backspace|Return|Enter|Insert|Delete|Pause|Print|SysReq|Clear|Home|End|Left|Up|Right|Down|PageUp|PageDown|Shift|Control|Meta|Alt|CapsLock|NumLock|ScrollLock|F[12][0-9]?|F3[0-5]?|F[4-9]|Super_[LR]|Menu|Hyper_[LR]|Help|Direction_[LR]|Space|Any|Exclam|QuoteDbl|NumberSign|Dollar|Percent|Ampersand|Apostrophe|ParenLeft|ParenRight|Asterisk|Plus|Comma|Minus|Period|Slash|[0-9]|Colon|Semicolon|Less|Equal|Greater|Question|At|[A-Z]|Bracket(?:Left|Right)|Backslash|AsciiCircum|Underscore|QuoteLeft|Brace(?:Left|Right)|Bar|AsciiTilde|nobreakspace|exclamdown|cent|sterling|currency|yen|brokenbar|section|diaeresis|copyright|ordfeminine|guillemotleft|notsign|hyphen|registered|macron|degree|plusminus|twosuperior|threesuperior|acute|mu|paragraph|periodcentered|cedilla|onesuperior|masculine|guillemotright|onequarter|onehalf|threequarters|questiondown|Agrave|Aacute|Acircumflex|Atilde|Adiaeresis|Aring|AE|Ccedilla|Egrave|Eacute|Ecircumflex|Ediaeresis|Igrave|Iacute|Icircumflex|Idiaeresis|ETH|Ntilde|Ograve|Oacute|Ocircumflex|Otilde|Odiaeresis|multiply|Ooblique|Ugrave|Uacute|Ucircumflex|Udiaeresis|Yacute|THORN|ssharp|division|ydiaeresis|AltGr|Multi_key|Codeinput|SingleCandidate|MultipleCandidate|PreviousCandidate|Mode_switch|Kanji|Muhenkan|Henkan|Romaji|Hiragana|Katakana|Hiragana_Katakana|Zenkaku|Hankaku|Zenkaku_Hankaku|Touroku|Massyo|Kana_Lock|Kana_Shift|Eisu_Shift|Eisu_toggle|Hangul|Hangul_(?:Start|End|Hanja|Jamo|Romaja|Jeonja|Banja|PreHanja|PostHanja|Special)|Dead_(?:Grave|Acute|Circumflex|Tilde|Macron|Breve|Abovedot|Diaeresis|Abovering|Doubleacute|Caron|Cedilla|Ogonek|Iota|Voiced_Sound|Semivoiced_Sound|Belowdot|Hook|Horn|Stroke|Abovecomma|Abovereversedcomma|Doublegrave|Belowring|Belowmacron|Belowcircumflex|Belowtilde|Belowbreve|Belowdiaeresis|Invertedbreve|Belowcomma|Currency|a|A|e|E|i|I|o|O|u|U|Small_Schwa|Capital_Schwa|Greek|Lowline|Aboveverticalline|Belowverticalline|Longsolidusoverlay|Key_Back)|Forward|Stop|Refresh|Volume(?:Down|Mute|Up)|Bass(?:Boost|Up|Down)|Treble(?:Up|Down)|Media(?:Play|Stop|Previous|Next|Record|Pause|TogglePlayPause)|HomePage|Favorites|Search|Standby|OpenUrl|LaunchMail|LaunchMedia|Launch[0-9A-F]|MonBrightness(?:Up|Down)|KeyboardLightOnOff|KeyboardBrightness(?:Up|Down)|PowerOff|WakeUp|Eject|ScreenSaver|WWW|Memo|LightBulb|Shop|History|AddFavorite|HotLinks|BrightnessAdjust|Finance|Community|AudioRewind|BackForward|ApplicationLeft|ApplicationRight|Book|CD|Calculator|ToDoList|ClearGrab|Close|Copy|Cut|Display|DOS|Documents|Excel|Explorer|Game|Go|iTouch|LogOff|Market|Meeting|MenuKB|MenuPB|MySites|News|OfficeHome|Option|Paste|Phone|Calendar|Reply|Reload|RotateWindows|RotationPB|RotationKB|Save|Send|Spell|SplitScreen|Support|TaskPane|Terminal|Tools|Travel|Video|Word|Xfer|Zoom(?:In|Out)|Away|Messenger|WebCam|MailForward|Pictures|Music|Battery|Bluetooth|WLAN|UWB|AudioForward|AudioRepeat|AudioRandomPlay|Subtitle|AudioCycleTrack|Time|Hibernate|View|TopMenu|PowerDown|Suspend|ContrastAdjust|LaunchG|LaunchH|TouchpadToggle|Touchpad(?:On|Off)|MicMute|Red|Green|Yellow|Blue|ChannelUp|ChannelDown|Guide|Info|Settings|MicVolumeUp|MicVolumeDown|New|Open|Find|Undo|Redo|MediaLast|Select|Yes|No|Cancel|Printer|Execute|Sleep|Play|Zoom|Exit|Context[1-4]|Call|Hangup|Flip|ToggleCallHangup|VoiceDial|LastNumberRedial|Camera|CameraFocus|unknown)
        # ShortcutContext
        |WidgetShortcut|WindowShortcut|ApplicationShortcut|WidgetWithChildrenShortcut
        # TextInteractionFlag
        |NoTextInteraction|TextSelectableBy(?:Mouse|Keyboard)|LinksAccessibleBy(?:Mouse|Keyboard)|TextEditable|TextEditorInteraction|TextBrowserInteraction
        # ItemSelectionMode
        |(?:Contains|Intersects)Item(?:Shape|BoundingRect)
        # ItemSelectionOperation
        |ReplaceSelection|AddToSelection
        # ItemFlag
        |NoItemFlags|ItemIs(?:Selectable|Editable|DragEnabled|DropEnabled|UserCheckable|Enabled|AutoTristate|Tristate)|ItemNeverHasChildren|ItemIsUserTristate
        # CheckState
        |Unchecked|PartiallyChecked|Checked
        # ItemDataRole
        |DisplayRole|DecorationRole|EditRole|ToolTipRole|StatusTipRole|WhatsThisRole|FontRole|TextAlignmentRole|BackgroundRole|ForegroundRole|BackgroundColorRole|TextColorRole|CheckStateRole|AccessibleTextRole|AccessibleDescriptionRole|SizeHintRole|InitialSortOrderRole|DisplayPropertyRole|DecorationPropertyRole|ToolTipPropertyRole|StatusTipPropertyRole|WhatsThisPropertyRole|UserRole
        # SortOrder
        |AscendingOrder|DescendingOrder
        # CaseSensitivity
        |CaseInsensitive|CaseSensitive
        # MatchFlag
        |MatchExactly|MatchContains|MatchStartsWith|MatchEndsWith|MatchRegExp|MatchWildcard|MatchFixedString|MatchRegularExpression|MatchCaseSensitive|MatchWrap|MatchRecursive
        # KeyboardModifier
        |NoModifier|ShiftModifier|ControlModifier|AltModifier|MetaModifier|KeypadModifier|GroupSwitchModifier|KeyboardModifierMask
        # MouseButton
        |(?:No|Left|Right|Middle|Mid|Back)Button|XButton1|ExtraButton1|ForwardButton|XButton2|ExtraButton2|TaskButton|ExtraButton(?:[3-9]|1[0-9]|2[0-4])|AllButtons|MaxMouseButton|MouseButtonMask
        # WindowType
        |Widget|Window|Dialog|Sheet|Drawer|Popup|Tool|ToolTip|SplashScreen|Desktop|SubWindow|ForeignWindow|CoverWindow|WindowType_Mask|MSWindowsFixedSizeDialogHint|MSWindowsOwnDC|BypassWindowManagerHint|X11BypassWindowManagerHint|FramelessWindowHint|WindowTitleHint|WindowSystemMenuHint|WindowMinimizeButtonHint|WindowMaximizeButtonHint|WindowMinMaxButtonsHint|WindowContextHelpButtonHint|WindowShadeButtonHint|WindowStaysOnTopHint|WindowTransparentForInput|WindowOverridesSystemGestures|WindowDoesNotAcceptFocus|MaximizeUsingFullscreenGeometryHint|CustomizeWindowHint|WindowStaysOnBottomHint|WindowCloseButtonHint|MacWindowToolBarButtonHint|BypassGraphicsProxyWidget|NoDropShadowWindowHint|WindowFullscreenButtonHint
        # WindowState
        |WindowNoState|WindowMinimized|WindowMaximized|WindowFullScreen|WindowActive
        # WindowModality
        |NonModal|WindowModal|ApplicationModal
        # WidgetAttribute - omited
        # ApplicationAttribute - omited
        # FocusReason
        |MouseFocusReason|TabFocusReason|BacktabFocusReason|ActiveWindowFocusReason|PopupFocusReason|ShortcutFocusReason|MenuBarFocusReason|OtherFocusReason|NoFocusReason
        # InputMethodHint
        |ImhNone|ImhHiddenText|ImhSensitiveData|ImhNoAutoUppercase|ImhPreferNumbers|ImhPreferUppercase|ImhPreferLowercase|ImhNoPredictiveText|ImhDate|ImhTime|ImhPreferLatin|ImhMultiLine|ImhNoEditMenu|ImhNoTextHandles|ImhDigitsOnly|ImhFormattedNumbersOnly|ImhUppercaseOnly|ImhLowercaseOnly|ImhDialableCharactersOnly|ImhEmailCharactersOnly|ImhUrlCharactersOnly|ImhLatinOnly|ImhExclusiveInputMask
        # InputMethodQuery - omited
        # EnterKeyType
        |EnterKeyDefault|EnterKeyReturn|EnterKeyDone|EnterKeyGo|EnterKeySend|EnterKeySearch|EnterKeyNext|EnterKeyPrevious
        # TouchPointState
        |TouchPointPressed|TouchPointMoved|TouchPointStationary|TouchPointReleased
        # ScreenOrientation
        |PrimaryOrientation|PortraitOrientation|LandscapeOrientation|InvertedPortraitOrientation|InvertedLandscapeOrientation
        # ConnectionType
        |AutoConnection|DirectConnection|QueuedConnection|BlockingQueuedConnection|UniqueConnection
        # ApplicationState
        |ApplicationSuspended|ApplicationHidden|ApplicationInactive|ApplicationActive
        # GestureState
        |NoGesture|GestureStarted|GestureUpdated|GestureFinished|GestureCanceled
        # GestureType
        |TapGesture|TapAndHoldGesture|PanGesture|PinchGesture|SwipeGesture|CustomGesture|LastGestureType
        # NativeGestureType
        |BeginNativeGesture|EndNativeGesture|PanNativeGesture|ZoomNativeGesture|SmartZoomNativeGesture|RotateNativeGesture|SwipeNativeGesture
        # CursorMoveStyle
        |LogicalMoveStyle|VisualMoveStyle
        # TimerType
        |PreciseTimer|CoarseTimer|VeryCoarseTimer
        # ScrollPhase
        |NoScrollPhase|ScrollBegin|ScrollUpdate|ScrollEnd|ScrollMomentum
        # MouseEventSource
        |MouseEventNotSynthesized|MouseEventSynthesizedBySystem|MouseEventSynthesizedByQt|MouseEventSynthesizedByApplication
        # MouseEventFlag
        |MouseEventCreatedDoubleClick|MouseEventFlagMask
        # ChecksumType - omited
        # HighDpiScaleFactorRoundingPolicy - omited
        # TabFocusBehavior
        |NoTabFocus|TabFocusTextControls|TabFocusListControls|TabFocusAllControls
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

    - match: (?:include|isQtObject|rgba|hsla|hsva|colorEqual|rect|point|size|font|vector2d|vector3d|vector4d|quaternion|matrix4x4|formatDate|formatTime|formatDateTime|openUrlExternally|fontFamilies|md5|btoa|atob|resolvedUrl|locale|binding|lighter|darker|tint|quit|exit|createQmlObject|createComponent|callLater){{identifier_break}}
      scope: support.function.builtin.qml
      pop: true

    - match: application{{identifier_break}}
      scope: support.type.object.qt.qml support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtqml-qt-application
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: platform{{identifier_break}}
      scope: support.type.object.qt.qml support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtqml-qt-platform
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: (?:inputMethod|styleHints){{identifier_break}}
      scope: support.type.object.qt.qml
      pop: true

  support-property-qtqml-qt-application:
    - match: (?:active|state|layoutDirection|font|arguments|name|displayName|version|organization|domain|supportsMultipleWindows|screens){{identifier_break}}
      scope: support.type.object.application.qml
      pop: true

  support-property-qtqml-qt-platform:
    - match: (?:os|pluginName){{identifier_break}}
      scope: support.type.object.platform.qml
      pop: true

  support-variable-qtquick:
    - match: Animation{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-animation
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: DoubleValidator{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-doublevalidator
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Drag{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-drag
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: DragHandler{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-draghandler
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Easing{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-easing
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: EventPoint{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-eventpoint
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: (?:Flickable|TableView){{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-flickable
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Font{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-font
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: FontLoader{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-fontloader
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Gradient{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-gradient
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: GraphicsInfo{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-graphicsinfo
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: GridView{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-gridview
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Image{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-image
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: InputMethod{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-inputmethod
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Item{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-item
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ItemView{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-itemview
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: KeyNavigation{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-keynavigation
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Keys{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-keys
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ListView{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-listview
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Loader{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-loader
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: PathAnimation{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-pathanimation
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: PathArc{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-patharc
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: PathView{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-pathview
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Pinch{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-parts-pinch
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: PointerDevice{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-pointerdevice
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Rotation(?:Animation|Animator){{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-rotationanimation
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ShaderEffect{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-shadereffect
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ShaderEffectSource{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-shadereffectsource
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: SmoothedAnimation{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-smoothedanimation
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: StandardKey{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-standardkey
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: SystemPalette{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-systempalette
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: TapHandler{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-taphandler
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Text{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-text
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: TextEdit{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-textedit
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: TextInput{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-textinput
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: (?:Int|RegExp|RegularExpression)Validator{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-parts-validator
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ViewSection{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-viewsection
            - include: object-property
            - include: else-pop
        - include: else-pop

  support-property-qtquick-parts-alignment:
    - match: Align(?:Left|Right|HCenter|Top|Bottom|VCenter){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-parts-status:
    - match: (?:Null|Ready|Loading|Error){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-parts-orientation:
    - match: (?:Horizontal|Vertical){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-parts-pinch:
    - match: (?:XAxis|YAxis|XAndYAxis|XandYAxis){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-parts-position:
    - match: (?:Header|Footer){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-parts-transform-origin:
    - match: (?:TopLeft|Top|TopRight|Left|Center|Right|BottomLeft|Bottom|BottomRight){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-parts-validator:
    - match: (?:Invalid|Intermediate|Acceptable){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-animation:
    - match: Infinite{{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-doublevalidator:
    - include: support-property-qtquick-parts-validator
    - match: (?:StandardNotation|ScientificNotation){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-drag:
    - include: support-property-qtquick-parts-pinch
    - match: (?:None|Automatic|Internal){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-draghandler:
    - match: (?:NoSnap|SnapAuto|SnapIfPressedOutsideTarget|SnapAlways){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-easing:
    - match: (?:Linear|InQuad|OutQuad|InOutQuad|OutInQuad|InCubic|OutCubic|InOutCubic|OutInCubic|InQuart|OutQuart|InOutQuart|OutInQuart|InQuint|OutQuint|InOutQuint|OutInQuint|InSine|OutSine|InOutSine|OutInSine|InExpo|OutExpo|InOutExpo|OutInExpo|InCirc|OutCirc|InOutCirc|OutInCirc|InElastic|OutElastic|InOutElastic|OutInElastic|InBack|OutBack|InOutBack|OutInBack|InBounce|OutBounce|InOutBounce|OutInBounce){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-eventpoint:
    - match: |-
        (?x:(?:
        # State
        Pressed|Updated|Stationary|Released
        # GrabTransition
        |GrabPassive|UngrabPassive|CancelGrabPassive|OverrideGrabPassive|GrabExclusive|UngrabExclusive|CancelGrabExclusive
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-flickable:
    - match: |-
        (?x:(?:
        # BoundsBehavior & BoundsMovement
        StopAtBounds|DragOverBounds|OvershootBounds|DragAndOvershootBounds|FollowBoundsBehavior
        # FlickableDirection
        |AutoFlickDirection|(?:Horizontal|Vertical|HorizontalAndVertical)Flick|AutoFlickIfNeeded
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-font:
    - match: |-
        (?x:(?:
        # FontWeight
        Thin|ExtraLight|Light|Normal|Medium|DemiBold|Bold|ExtraBold|Black
        # Capitalization
        |MixedCase|AllUppercase|AllLowercase|SmallCaps|Capitalize
        # HintingPreference
        |PreferDefaultHinting|PreferNoHinting|PreferVerticalHinting|PreferFullHinting
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-fontloader:
    - include: support-property-qtquick-parts-status

  support-property-qtquick-gradient:
    - match: (?:Vertical|Horizontal){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-graphicsinfo:
    - match: |-
        (?x:(?:
        # GraphicsApi
        Unknown|Software|OpenGL|Direct3D12|OpenVG|OpenGLRhi|Direct3D11Rhi|VulkanRhi|MetalRhi|NullRhi
        # ShaderType
        |UnknownShadingLanguage|GLSL|HLSL|RhiShader
        # ShaderCompilationType
        |RuntimeCompilation|OfflineCompilation
        # ShaderSourceType
        |ShaderSourceString|ShaderSourceFile|ShaderByteCode
        # OpenGLContextProfile
        |OpenGLNoProfile|OpenGLCoreProfile|OpenGLCompatibilityProfile
        # RenderableType
        |SurfaceFormatUnspecified|SurfaceFormatOpenGL|SurfaceFormatOpenGLES
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-gridview:
    - include: support-property-qtquick-itemview
    - match: |-
        (?x:(?:
        # Flow
        FlowLeftToRight|FlowTopToBottom
        # SnapMode
        |NoSnap|SnapToRow|SnapOneRow
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-image:
    - include: support-property-qtquick-parts-alignment
    - include: support-property-qtquick-parts-status
    - match: (?:Stretch|PreserveAspectFit|PreserveAspectCrop|Tile|TileVertically|TileHorizontally|Pad){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-inputmethod:
    - match: (?:Click|ContextMenu){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-item:
    - include: support-property-qtquick-parts-transform-origin

  support-property-qtquick-itemview:
    - include: support-property-qtquick-flickable
    - match: |-
        (?x:(?:
        # LayoutDirection
        LeftToRight|RightToLeft|VerticalTopToBottom|VerticalBottomToTop
        # VerticalLayoutDirection
        |TopToBottom|BottomToTop
        # HighlightRangeMode
        |NoHighlightRange|ApplyRange|StrictlyEnforceRange
        # PositionMode
        |Beginning|Center|End|Visible|Contain|SnapPosition
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

    - match: (?:delayRemove|isCurrentItem|view|nextSection|previousSection|section){{identifier_break}}
      scope: support.class.builtin.qml
      pop: true

  support-property-qtquick-keynavigation:
    - match: (?:BeforeItem|AfterItem){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-keys:
    - include: support-property-qtquick-keynavigation

  support-property-qtquick-listview:
    - include: support-property-qtquick-itemview
    - include: support-property-qtquick-parts-orientation
    - match: (?:NoSnap|SnapToItem|SnapOneItem|InlineHeader|OverlayHeader|PullBackHeader|InlineFooter|OverlayFooter|PullBackFooter){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-loader:
    - include: support-property-qtquick-parts-status

  support-property-qtquick-pathanimation:
    - match: (?:Fixed|RightFirst|LeftFirst|BottomFirst|TopFirst){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-patharc:
    - match: (?:Clockwise|Counterclockwise){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-pathview:
    - match: |-
        (?x:(?:
        # HighlightRangeMode
        (?:NoHighlight|Apply|StrictlyEnforce)Range
        # SnapMode
        |NoSnap|Snap(?:ToItem|OneItem)
        # MovementDirection
        |Shortest|Negative|Positive
        # PositionMode
        |Beginning|Center|End|Contain|SnapPosition
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-pointerdevice:
    - match: |-
        (?x:(?:
        # DeviceType
        UnknownDevice|Mouse|TouchScreen|TouchPad|Puck|Stylus|Airbrush|AllDevices
        # PointerType
        |GenericPointer|Finger|Pen|Eraser|Cursor|AllPointerTypes
        # CapabilityFlag
        |Position|Area|Pressure|Velocity|MouseEmulation|Scroll|Hover|Rotation|XTilt|YTilt
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-rotationanimation:
    - match: (?:Numerical|Shortest|Clockwise|Counterclockwise){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-shadereffect:
    - match: (?:NoCulling|BackFaceCulling|FrontFaceCulling|Compiled|Uncompiled|Error){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-shadereffectsource:
    - match: |-
        (?x:(?:
        # WrapMode
        ClampToEdge|Repeat(?:Horizontally|Vertically)?
        # Format
        |Alpha|RGBA?
        # TextureMirroring
        |NoMirroring|MirrorHorizontally|MirrorVertically
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-smoothedanimation:
    - match: (?:Eased|Immediate|Sync){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-standardkey:
    - match: |-
        (?x:(?:
        # StandardKey
        UnknownKey|HelpContents|WhatsThis|Open|Close|Save|New|Delete|Cut|Copy|Paste|Undo|Redo|Back|Forward|Refresh|ZoomIn|ZoomOut|Print|AddTab|NextChild|PreviousChild|Find|FindNext|FindPrevious|Replace|SelectAll|Bold|Italic|Underline|MoveToNextChar|MoveToPreviousChar|MoveToNextWord|MoveToPreviousWord|MoveToNextLine|MoveToPreviousLine|MoveToNextPage|MoveToPreviousPage|MoveToStartOfLine|MoveToEndOfLine|MoveToStartOfBlock|MoveToEndOfBlock|MoveToStartOfDocument|MoveToEndOfDocument|SelectNextChar|SelectPreviousChar|SelectNextWord|SelectPreviousWord|SelectNextLine|SelectPreviousLine|SelectNextPage|SelectPreviousPage|SelectStartOfLine|SelectEndOfLine|SelectStartOfBlock|SelectEndOfBlock|SelectStartOfDocument|SelectEndOfDocument|DeleteStartOfWord|DeleteEndOfWord|DeleteEndOfLine|InsertParagraphSeparator|InsertLineSeparator|SaveAs|Preferences|Quit|FullScreen|Deselect|DeleteCompleteLine|Backspace|Cancel
        # SequenceFormat
        |NativeText|PortableText
        # SequenceMatch
        |NoMatch|PartialMatch|ExactMatch
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-systempalette:
    - match: (?:Active|Inactive|Disabled){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-taphandler:
    - match: (?:DragThreshold|WithinBounds|ReleaseWithinBounds){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-text:
    - include: support-property-qtquick-parts-alignment
    - match: |-
        (?x:(?:
        # HAlignment - not in parts
        AlignJustify
        # TextStyle
        |Normal|Outline|Raised|Sunken
        # TextFormat
        |(?:Plain|Rich|Markdown|Auto|Styled)Text
        # TextElideMode
        |Elide(?:Left|Right|Middle|None)
        # WrapMode
        |NoWrap|WordWrap|WrapAnywhere|WrapAtWordBoundaryOrAnywhere|Wrap
        # RenderType
        |QtRendering|NativeRendering
        # LineHeightMode
        |ProportionalHeight|FixedHeight
        # FontSizeMode
        |FixedSize|HorizontalFit|VerticalFit|Fit
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-textedit:
    - include: support-property-qtquick-parts-alignment
    - match: |-
        (?x:(?:
        # HAlignment - not in parts
        AlignJustify
        # TextFormat
        |(?:Plain|Rich|Auto|Markdown)Text
        # WrapMode
        |NoWrap|WordWrap|WrapAnywhere|WrapAtWordBoundaryOrAnywhere|Wrap
        # SelectionMode
        |Select(?:Characters|Words)
        # RenderType
        |QtRendering|NativeRendering
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-textinput:
    - include: support-property-qtquick-parts-alignment
    - match: |-
        (?x:(?:
        # EchoMode
        Normal|NoEcho|Password|PasswordEchoOnEdit
        # WrapMode
        |NoWrap|WordWrap|WrapAnywhere|WrapAtWordBoundaryOrAnywhere|Wrap
        # SelectionMode
        |Select(?:Characters|Words)
        # CursorPosition
        |CursorBetweenCharacters|CursorOnCharacter
        # RenderType
        |QtRendering|NativeRendering
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-viewsection:
    - match: (?:FullString|FirstCharacter|InlineLabels|CurrentLabelAtStart|NextLabelAtEnd){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-variable-qtquick-dialogs:
    - match: StandardButton{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-dialogs-standardbutton
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: StandardIcon{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-dialogs-standardicon
            - include: object-property
            - include: else-pop
        - include: else-pop

  support-property-qtquick-dialogs-standardbutton:
    - match: (?:NoButton|Ok|Save|SaveAll|Open|Yes|YesToAll|No|NoToAll|Abort|Retry|Ignore|Close|Cancel|Discard|Help|Apply|Reset|RestoreDefaults|NButtons){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-dialogs-standardicon:
    - match: (?:NoIcon|Information|Warning|Critical|Question){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-variable-qtquick-controls:
    - match: (?:AbstractButton|Button|RoundButton|ToolButton){{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-abstractbutton
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Popup{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-popup
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Dial{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-dial
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Dialog{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-dialog
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: DialogButtonBox{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-dialogbuttonbox
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ScrollBar{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-scrollbar
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Slider{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-slider
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: StackView{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-stackview
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: TabBar{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-qtquick-controls-tabbar
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: TextArea{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            # inherits TextEdit
            - include: support-property-qtquick-textedit
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: TextField{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            # inherits TextInput
            - include: support-property-qtquick-textinput
            - include: object-property
            - include: else-pop
        - include: else-pop

  support-property-qtquick-controls-parts-buttonrole:
    - match: (?:(?:Invalid|Accept|Reject|Destructive|Action|Help|Yes|No|Reset|Apply)Role|NRoles|RoleMask|AlternateRole|Stretch|Reverse|EOL){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-parts-snap-mode:
    - match: (?:NoSnap|SnapAlways|SnapOnRelease){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-abstractbutton:
    - match: (?:IconOnly|TextOnly|TextBesideIcon|TextUnderIcon){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-popup:
    - include: support-property-qtquick-parts-transform-origin
    - match: (?:NoAutoClose|CloseOn(?:PressOutside|PressOutsideParent|ReleaseOutside|ReleaseOutsideParent|Escape)){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-dial:
    - include: support-property-qtquick-controls-parts-snap-mode
    - match: |-
        (?x:(?:
        # SnapMode
        NoSnap|SnapAlways|SnapOnRelease
        # InputMode
        |Circular|Horizontal|Vertical
        )){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-dialog:
    - include: support-property-qtquick-controls-popup
    - include: support-property-qtquick-dialogs-standardbutton

  support-property-qtquick-controls-dialogbuttonbox:
    - include: support-property-qtquick-dialogs-standardbutton
    - include: support-property-qtquick-controls-parts-buttonrole
    - include: support-property-qtquick-parts-position
    - match: (?:UnknownLayout|WinLayout|MacLayout|KdeLayout|GnomeLayout|MacModelessLayout|AndroidLayout){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-scrollbar:
    - include: support-property-qtquick-controls-parts-snap-mode
    - match: (?:AsNeeded|AlwaysOff|AlwaysOn){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-slider:
    - include: support-property-qtquick-controls-parts-snap-mode

  support-property-qtquick-controls-stackview:
    - match: (?:Inactive|Deactivating|Activating|Active){{identifier_break}}
      scope: support.constant.builtin.qml
      pop: true

  support-property-qtquick-controls-tabbar:
    - include: support-property-qtquick-parts-position

  support-variable-qtquick-templates:
    - match: (?:T|Controls|QtControls2?|QQC2?){{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-variable-qtquick-controls
            - include: object-property
            - include: else-pop
        - include: else-pop

  support-variable-kde:
    # https://api.kde.org/frameworks/ki18n/html/classKLocalizedContext.html
    - match: (?:i18n|i18nc|i18np|i18ncp|i18nd|i18ndc|i18ndp|i18ndcp|xi18n|xi18nc|xi18np|xi18ncp|xi18nd|xi18ndc|xi18ndp|xi18ndcp|translationDomain){{identifier_break}}
      scope: support.function.qml
      pop: true

  support-attached:
    - include: support-attached-member-qtqml

  support-attached-member-qtqml:
    - match: Component{{identifier_break}}
      scope: support.class.builtin.qml
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-attached-member-qtqml-component
            - include: expect-attached-member
            - include: else-pop
        - include: else-pop

  support-attached-member-qtqml-component:
    - match: (?=on(?:Completed|Destruction){{identifier_break}})
      set: signal-handler-non-attached-support

  # END support

  # BEGIN component

  inline-component:
    - match: component{{identifier_break}}
      scope: keyword.declaration.component.qml
      set:
        - inline-component-meta
        - expect-object-standalone
        - inline-component-expect-colon-separator
        - inline-component-expect-name

  inline-component-meta:
    - meta_include_prototype: false
    - meta_scope: meta.component.qml
    - include: immediately-pop

  inline-component-expect-name:
    - include: inline-component-name
    - include: else-pop

  inline-component-name:
    - match: '{{identifier_title}}'
      scope: entity.name.class.qml
      pop: true

  inline-component-expect-colon-separator:
    - match: ':'
      scope: punctuation.separator.type.qml
      pop: true
    - include: else-pop

  # END component

  # BEGIN enum

  enum-declaration:
    - match: (?=enum{{identifier_break}})
      set:
        - enum-meta
        - expect-enum-block
        - expect-enum-name
        - expect-enum-keyword

  enum-meta:
    - meta_include_prototype: false
    - meta_scope: meta.enum.qml
    - include: immediately-pop

  expect-enum-block:
    - match: \{
      scope: punctuation.section.block.begin.qml
      set:
        - meta_scope: meta.block.qml meta.sequence.constants.qml
        - match: \}
          scope: punctuation.section.block.end.qml
          pop: true
        - match: ','
          scope: punctuation.separator.comma.qml
        - match: '{{identifier_title}}'
          scope: meta.constants.identifier.qml entity.name.constant.qml
    - include: else-pop

  expect-enum-name:
    - match: '{{identifier_title}}'
      scope: meta.enum.identifier.qml entity.name.enum.qml
      pop: true
    - include: else-pop

  expect-enum-keyword:
    - match: enum{{identifier_break}}
      scope: keyword.declaration.enum.qml
      pop: true

  # END enum

  # BEGIN handlers

  signal-handler-non-attached:
    - match: (?={{identifier_handler}})
      set:
        - signal-binding-meta
        - expect-binding
        - signal-handler-name

  # only set this context from verified support contexts
  signal-handler-non-attached-support:
    - match: (?={{identifier_handler}})
      set:
        - signal-binding-meta
        - expect-binding
        - signal-handler-name-support

  signal-binding-meta:
    - meta_include_prototype: false
    - meta_scope: meta.handler.qml
    - include: immediately-pop

  signal-handler-name:
    - match: '{{identifier_handler}}'
      scope: meta.binding.name.qml variable.function.qml
      captures:
        2: markup.underline.qml
      pop: true

  signal-handler-name-support:
    - match: '{{identifier_handler}}'
      # Italic is not how many themes treat support scopes, but without it
      # an underline scope would reset text style back to regular.
      scope: meta.binding.name.qml support.function.qml markup.italic.qml
      captures:
        2: markup.underline.qml
      pop: true

  # END handlers
